DataBase 
-------------------------------------------------------

- what is DataBase?
  - Database server - RDBMS / DBMS / NoSql (MongoDB)
    - SQl-91 Standard to write the queries
      - Database
        -Table
          - Rows and Cols
  Products 
  - Postgresql (pgAdmin4 GUI)
  - MySQL (phpmyqdmin GUI)
  - MarineDB
  - Oracle
  - MsSQL
  ..
  ..

Installation of postgresql

- sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
- sudo apt update
- wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
- sudo apt-get update
- sudo apt-get -y install postgresql
- sudo apt install postgresql-contrib
- To Install pgAdmin4
- curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add
- sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'
- sudo apt update
- sudo apt install pgadmin4
- sudo /usr/pgadmin4/bin/setup-web.sh
- http://SERVER_IP/pgadmin4

once Installation done, create a user, DB and allocate auth
- sudo su - postgres
- psql

  Run following queries
  - CREATE USER samyak3009 WITH PASSWORD '******8';
  - CREATE DATABASE innovaccer;
  - GRANT ALL PRIVILEGES ON DATABASE innovaccer to samyak3009;
  - ALTER USER user_name CREATEDB CREATEROLE LOGIN;

MySQL installation

- Queries
  - CREATE table;
  - Data type
    - Int - Numerical
    - Float
    - Decimal
    - Char (255)
    - Varchar (255)
    - Date
    - Timestamp
    - Time
    - Bool
    - Enum ["Indian","Shrilanka","UAE"]

  - Insert
  - Select
  - Auto Increament
    - SERIAL --> Postgres
    - AUTOINCREAMENT ----> Mysql
    - IDENTITY(1,1) ----> MSSQL
  - Relationship
    - Primary Key
      - Unique Key
      - Not Null
      - Usually it is assign to the ID col of the table
      - only 1 primary key in a table
      - Query
        Create table roles(
          rolesId Serial Primary key,
          rolename varchar(255),
          datecreated date,
          isSystemRole bool
        ) 
    - FK
      - it can be multiple FKs
      - Query 
        Create tabe users(
          userId Serial,
          first_name varchar(255),
          last_name varchae(255),
          rolesId int REFERENCES roles(rolesId)
        )
  - ALTER TABLES
    - alter table users ADD COLUMN emailId varchar(100) UNIQUE
    - alter table users ALTER COLUMN emailId TYPE varchar(150)
    - alter table users ALTER COLUMN emailId TYPE char(200)

  - DELETE AND DROP
    - delete from users; -- it just empty the table with or without where clause;
    - drop table user -- it drop the complete table with the data;
    - truncate table users -- empty the table;
  - INSERT QUERY
    -insert into roles(rolesname,datecreated,isSystemrole) values ('Super1',now(),true);
    -insert into roles(rolesname,datecreated,isSystemrole) values ('Super2',now(),true), ('Super3',now(),true);
  
  - CRUD OPERATIONS
    -- C CREATE
      -insert into roles(rolesname,datecreated,isSystemrole) values ('Super1',now(),true);
    -- R READ
      - select * from roles;
    -- U UPDATE
      - update roles set rolename = 'samyak' where roleId = 5;
    -- D DELETE
      - delete from roles where roleId = 5;


MOVIES DATABASE

  select * from actors;
  select * from directors;
  select * from movies;
  select * from movies_actors;
  select * from movie_revenues;
  select first_name, last_name from directors;
  select first_name as f_name, last_name AS l_name from directors;
  select * from movies where age_certification = '15';
  select * from movies where age_certification = '15' and movie_lang = 'English';
  select * from movies where age_certification = '15' or movie_lang = 'English';
  select * from movies where movie_length in (121,150,115,112);
  select * from movies where movie_length not in (121,150,115,112);
  select * from movies where age_certification in ('PG','18','U');
  select * from movies where age_certification not in ('PG','18','U');
  select * from movies where movies_name like '%Now';
  select * from movies where movies_name like '%Now%';
  select * from movies where movies_name like 'City of ___';
  select * from movies where release_date = '2000-01-02';
  select * from movies where release_date between '2000-01-02' and '2010-01-01' (--OPTIMIZED VERSION )
  select * from movies where release_date > '2000-01-02' and release_date < '2010-01-01'
  select * from movies LIMIT 5
  select * from movies LIMIT 7 offset 10
  select * from movies LIMIT 10,7 ------> Mysql
  select * from movies order by movies_id DESC LIMIT 1
  select * from movies order by age_certifiaction DESC fetch first 5 row only
  select * from movies fetch first 5 row only order by movies_id DESC
  select movie_id, movies_name, movie_lang from movies offset 10 rows fetch first 10 rows only
  select * from movies FETCH FIRST 15 ROW ONLY	
  select * from movies offset 10 rows fetch first 10 rows only	
  select * from movies fetch first row only order by movies_id DESC
  select top 5 from movies --> MySQL Server
  select 'concat' || 'values' as completevalue
  select 'mayur' || ' ' || 'patil' as fullname
  select CONCAT(first_name,' ',last_name) as fullname from actors	
  select CONCAT_WS(' ',first_name, last_name, date_of_birth) as fullname from actors
  select first_name || ' ' || last_name as full_name from actors
  select * from pg_database; --------------> this list all the available database;
  select * from pg_catalog.pg_tables where schemaname like 'public' ----> this will list all the available tables
  select * from informtion_schema.columns where table_name = 'movies' -----> this describe the col of the table

- Aggregrate function
  - SUM
  - MAX
  - MIN
  - COUNT
  - AVG
-Note : every aggregrate function always ignore the NULL value;
        aggregration function are not allowed in the where clause
  
  select * from movies;
  select count(*) from movies;
  select count(movie_id) from movies; ----> optimized one as only one column is counted
  select count(domestic_takings) from movies_revenues
  select sum(domestic_takings) as national_revenue from movies_revenues;
  select MAX(domestic_takings) as maximum_revenue from movies_revenues;
  select MIN(domestic_takings) as minimum_revenue from movies_revenues;
  select AVG(domestic_takings) as average_revenue from movies_revenues;

- GROUP BY 
  select movies_lang, count(*) as movies from movies group by movies_lang;
  select movies_lang from movies group by movies_lang;
  select movies_lang, age_certification, avg(movies_length) as movies from movies group by movies_lang, age_certifiaction
  # select movies_lang, age_certification, avg(movies_length) as movies from movies group by movies_lang

- HAVING WITH GROUP BY
    select movies_lang, count(movies_lang) from movies group by movies_lang;
    # select movies_lang, count(movies_lang) from movies where count(movies_lang)>5 group by movies_lang;
    select movies_lang, count(movies_lang) from movies group by movies_lang  having count(movies_lang)>5;
    select movies_lang, count(movies_lang) from movies where movies_length>120 group by movies_lang  having count(movies_lang)>5;

- Math Operations and Calc
  select 5 + 6 as T, 10 - 5 as M, 2 * 4 as S, 10/12 as k;
  select 12 % 4 as mod;
  select movies_id, (domestic_taking + international_taking) as total, * from movie_revenues;

 


# select movie_lang ,count(movie_lang) as no_of_movies from movies group by movie_lang, movie_length having movie_length < avg(movie_length) 

-- Table relation
  - one to one relation
  - one to many relation
  - many to many relation

-- SQL JOINS"
  - INNER JOIN
    select d.director_id,
           d.first_name,
           d.last_name,
           m.movies_name
        from
          directors d
        INNER JOIN
          movies m
        om  
          d.director_id = m.director_id
        where
          m.movies_lang = 'japanese'


    select d.director_id,
           d.first_name,
           d.last_name,
           m.movies_name,
           r.domestic_takings
        from
          directors d
        INNER JOIN
          movies m
        on  
          d.director_id = m.director_id
        INNER JOIN
          movies_revenues m
        on
          m.movies_id = r.movies_id

        where
          m.movies_lang = 'japanese'

  - LEFT JOIN
    select d.director_id,
           d.first_name,
           d.last_name,
           m.movies_name
        from
          directors d
        LEFT JOIN
          movies m
        om  
          d.director_id = m.director_id

  - RIGHT JOIN
    select d.director_id,
           d.first_name,
           d.last_name,
           m.movies_name
        from
          directors d
        RIGHT JOIN
          movies
        om  
          d.director_id = m.director_id
  
  - FULL JOIN
    select d.director_id,
           d.first_name,
           d.last_name,
           m.movies_name
        from
          directors d
        FULL JOIN
          movies
        om  
          d.director_id = m.director_id
  
  - UNION --- merge the two table in vertical way but join merger the table in horizontal way
    condition :- the column defination should be same
    select first_name, lastname from actors
    UNION
    select first_name, lastname from directors

  - UNION ALL -- will not remove the duplicate column although mergei the table as it is
    select first_name, lastname from actors
    UNION ALL
    select first_name, lastname from directors
  
  - INTERSECT -- will reflect the common data
    select first_name from actors
    INTERSECT
    select first_name from directors

  - EXCEPT -- to find the uncomman things
    select first_name, lastname from actors
    EXCEPT
    select first_name, lastname from directors

-- SUB QUERIES

  - non-corelated subqueries
    - select movies_name, movies_length from movies
        where movies_length > (select avg(movies_length) from movies)

  - corealted subqueries
  -- find the oldest director for each nationality
    - select 
      d1.first_name,
      d1.last_name,
      d1.date_of_birth,
      d1.nationality 
        from directors d1 
      where date_of_birth = (select min(date_of_birth) form directors d2 where d2.nationality = d1.nationality)


    - select movies_name from movies
      where movie_id in (select movie_id  from movie_revenue where international_takings > domestic_takings)


    - select movies_name from movies
      where movie_id in (select movie_id  from movie_revenue where international_takings > domestic_takings
                          UNION ALL
                        select movie_id  from movie_revenue where international_takings < domestic_takings)
   
    - select 
        m.movie_id,
        m.movie_name,
        d.first_name,
        d.last_name
      from movie m 
        JOIN
      director d
        on m.director_id = d.director_id
      where
        movie_id in (select movie_id  from movie_revenue where international_takings > domestic_takings)


-- String function

  - select UPPER('samyak'); #SAMYAK
  - select LOWER('JAIN'); #jain
  - select INITCAP('samyak jain') #Samyak Jain
  - select *, UPPPER(first_name) as CAP from actors
  - select LEFT('INDIA',4); #INDI
  - select LEFT('INDIA', -3) #IN  (it will remove the last 3 letter)
  - select RIGHT('INDIA',3) #DIA
  - select RIGHT('INDIA',-3) #IA  (it will remove the last 3 letter)
  - select 8,LEFT(movies_name,5) from movies
  - select REVERSE('INDIA')
  - select SUBSTRING('INDIA,2,3) #NDI  (start from 2 and print 3 character)
  - select REPLACE('I AM FROM INDIA','INDIA','USA')
  - select SPLIT_PART('samyak3009@gmail.com','@',1) #samyak3009
  - select date_of_birth from directors
  - select SPLIT_PART(date_of_birth::TEXT,'-',1) from directors
  - select SPLIT_PART(date_of_birth::varchar(50),'-',1) from directors
  - select SPLIT_PART(date_of_birth::varchar(2),'-',1) from directors
  - select REPLACE(date_of_birth::varchar(10),'-','/') from directors

-- JSON (JavaScript Object Notation)
  - JSON
  - JSONB


  -- to default data type
  select '{title : "Ironman"}'
  - to type cast into text if not by default
  select '{title : "Ironman"}'::TEXT
  - to preserve the space
  select '{"title" : "Ironman"}'::JSON
  - to not to preserve the space 
  select '{
      
      "title" : "Ironman"
      
      }':: JSONB


create table book(
  bookId serial primary key,
  bookinfo JSONB
)

insert into  books (bookinfo) values ('{"title":"book 1"}'), ('{"title":"book 2"}') , ('{"title":"book 3"}')

insert into  books (bookinfo) values ('{"title":"book 4","author":"Author 1"}')

select bookid,bookinfo ->'title' from books #to directly acccess the json value in double quotes
select bookid,bookinfo ->>'title' from books #to directly acccess the json value wihout double quotes

update books set bookinfo = bookinfo || '{"author":"Author 1"}' where bookId =1;
update books set bookinfo = bookinfo || '{"author":"Author 1 Modifies"}' where bookId =1;
update books set bookinfo = bookinfo || '{"author":"Author 1, "category":"computer"}' where bookinfo->> 'author' = 'Author 1';
update books set bookinfo = bookinfo - 'category' where bookinfo->> 'author' = 'Author 1'; # to remove a key value from a json

-how to see the data in json
select row_to_json(directors) from directors;
select row_to_json(mydirectors) from (select * from directors) as mydirectors;


-- to create a virtual table for complicated queries that are to be executed very often

  create  or replace view moviedetails
  as
  select movies.* , directors.first_name,directors.last_name from movies 
  INNER JOIN
  directors
  on movies.director_id = director.directors_id


  select * form moviedetails  # to fetch the data from this virtual table

-changes done in original file will get reflected in virtual table to 

- TRIGGER
  - A trigger is   defined as any event that sets  a course   of sequemce /action in a realtime environment
  - EVENT
    - INSERT , UPADTE , DELETE , TURUNCATE    
      - TRIGGERS are associated with tables and view
    - WHEN
      - before
      - after
      - instead
    - LEVEL
      - Table
      - Row

    CREATE TABLE players(
      player_id serial primary key,
      name varchar(100) 
    )
    CREATE TABLE players_audits (
      player_audit_id serial primary key,
      player_id INT NOT NULL,
      name varchar(100),
      edit_date TIMESTAMP NOT NULL
    )
    insert into players (name) values ('virat kholi'), ('Dhoni') ,('sachin tendulkar');
    
    --function is logic  which will be executed/triggered on triggered event.

    CREATE OR REPLACE FUNCTION fn_player_name_changes_log()
      RETURNS TRIGGER
      LANGUAGE PLPGSQL
      as $$
          BEGIN
            --INTRODUCE TO BUSSINESS LOGIC
            -- NEW AND OLD
            IF  NEW.name <> OLD.name
              THEN 
              INSERT INTO playeraudits ( player_id,name,edit_date) values (OLD.player_id,OLD.name,now());
            END IF

            RETUEN NEW;
          END;
         $$


    CREATE TRIGGER trigger_players_name_changes
    -- BEFORE|AFTER|INSTEAD  INSERT|UPDATDELETE|TRUNCATE
    BEFORE UPDATE
    ON  players
    FOR EACH ROW
      EXECUTE PROCEDURE fn_player_name_changes_log()


  - update players set name = 'Mahendra Singh Dhoni' where player_id = 2
  - update players set name = 'MSD' where player_id = 2

  - select * from players;
  - select * from players_audits;











